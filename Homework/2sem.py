# Задача 10: На столе лежат n монеток. Некоторые из них лежат вверх
# решкой, а некоторые – гербом. Определите минимальное число
# монеток, которые нужно перевернуть, чтобы все монетки были
# повернуты вверх одной и той же стороной. Выведите минимальное
# количество монет, которые нужно перевернуть.

# n = int(input())
# orel = 0
# reshka = 0

# for i in range( n ):
#     coins = int(input())
#     if coins == 1:
#         orel += 1
#     elif coins == 0:
#         reshka += 1

# print(min(orel, reshka))



# n = int(input()) 
# heads = 0 
# tails = 0 
# for i in range(n): 
#     coin = int(input()) 
#     if coin == 1: 
#         heads += 1 
#     else: 
#         tails += 1 
# print(min(heads, tails))




# Задача 12: Петя и Катя – брат и сестра. Петя – студент, а Катя –
# школьница. Петя помогает Кате по математике. Он задумывает два
# натуральных числа X и Y (X,Y≤1000), а Катя должна их отгадать. Для
# этого Петя делает две подсказки. Он называет сумму этих чисел S и их
# произведение P. Помогите Кате отгадать задуманные Петей числа.

# s = 12 
# p = 27

# solutions = [] # Создается пустой список, в который будут добавляться найденные пары чисел
# for i in range(1, 1001): # Запускается внешний цикл, который перебирает все возможные значения для первого числа от 1 до 1000 включительно.
#     for j in range(1, 1001): # Внутри внешнего цикла запускается вложенный цикл, который перебирает все возможные значения для второго числа также от 1 до 1000 включительно.
#         if s == i + j and p == i * j: # Для каждой пары чисел (i,j) проверяется, равна ли сумма этих чисел заданному значению s и равно ли их произведение заданному значению p. Если оба условия выполняются, то..
#             solutions.append((min(i, j), max(i, j))) # Пара чисел (i,j) добавляется в список решений solutions, при этом числа упорядочиваются так, чтобы меньшее число стояло на первом месте, а большее - на втором, что соответствует условию задачи X≤Y.
# solutions = list(set(solutions)) # Удаляются все дублирующиеся пары чисел из списка solutions с помощью преобразования его в множество и обратно в список. Это гарантирует, что каждая пара чисел будет уникальна

# for solution in solutions: # Запускается цикл, который проходит по всем найденным парам чисел в списке solutions.
#     print(solution[0], solution[1]) # Для каждой пары чисел (X,Y) выводятся числа X и Y через пробел.



# Требуется вывести все целые степени двойки (т.е. числа
# вида 2k), не превосходящие числа N.

# n = 16

# i = 0 
# while 2 ** i <= n: 
#     print(2 ** i) 
#     i += 1 





